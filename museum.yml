AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an Application Load Balancer and Auto Scaling Group with VPC configuration

Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Project

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true  

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway 

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: PUC-launchtemp
      LaunchTemplateData:
        ImageId: ami-080e1f13689e07408
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        UserData: !Base64 |
          #!/bin/bash
          sudo su
          sudo apt update
          sudo apt install apache2 php libapache2-mod-php php-mysql php-dom php-gd mysql-server git -y

          sudo systemctl start apache2
          sudo systemctl enable apache2
          sudo systemctl start mysql
          sudo systemctl enable mysql

          sudo mkdir project
          cd project
          git clone https://github.com/PrasadDhobale/nationalmuseum.git
          cd .. 
          mkdir /var/www/html/museum
          sudo mv project/nationalmuseum/* /var/www/html/museum

          # sudo rm /var/www/html/index.html 

          sudo mysql -e "CREATE USER 'testuser'@'%' IDENTIFIED BY 'pass@123'; GRANT ALL PRIVILEGES ON *.* TO 'testuser'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"

          sudo mysql -u testuser -ppass@123 -e "CREATE DATABASE IF NOT EXISTS museum" && sudo mysql -u testuser -ppass@123 -D museum < /var/www/html/museum/museum.sql

        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnet
            Groups: 
              - !Ref InstanceSecurityGroup


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: PUC-tgtgrp
      TargetType: instance
      Protocol: HTTP
      Port: 80
      VpcId: !Ref MyVPC  

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PUC-alb
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      SecurityGroups:
        - !GetAtt InstanceSecurityGroup.GroupId
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'


  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: PUC-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DesiredCapacity: 2
      MinSize: 1
      MaxSize: 3


Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
